#include <iostream>
#include <fstream>
#include <iomanip>
#include <algorithm>
#include <string>

const char FR[]="duom.txt";
const char FW[]="Akatsukai.txt";

using namespace std;

void Skaito (const char FR[], int a[], int &n);
void display (const char FW[], int a[], int n);
void Skaiciuojame (int a[], int n);
void naikiname (int a[], int n, int &k);
void Iterpiame(int a[], int &n, int k);
void Irasymas (const char FW[], int n, int a[], int min );

int main()
{
 int a[100], n;
 int k=0;
 int min=0;
  Skaito(FR,a,n);
  Skaiciuojame(a,n);
  naikiname(a,n, k);
  Iterpiame( a, n,k);
  Irasymas(FW, n, a,min);
  return 0;
}

void Skaito (const char FR[],int a[], int &n)
{
   ifstream fr(FR);
   fr>>n;
  for(int i=0; i<n; i++)
  {
       fr>>a[i];
  }
}

void Skaiciuojame (int a[], int n)
{
   sort(a, a+n);
   display(FW, a, n);
 }
 
void naikiname(int a[], int n, int &k){
    int m;
    for(int i=0; i<n; i++)
  {
    for(int j=i+1; j<n; j++)
       {
           if(a[i]==a[j]){
               a[i]==a[j];
               m=i;
                a[m]=69;
             k++;
           }
       }
    }
}
    
void display(const char FW[], int a[], int n) {
       ofstream fw(FW);
   for(int i = 0; i < n; ++i)
   {
       fw<< a[i] <<" ";
   }
   fw<<" "<<endl;
} 

void Iterpiame(int a[], int &n, int k)
{
    int g=n;
    for(int i=0; i<g;i++){
        if(a[i]==0){
            for(int t=g;t>i;t--)
            {
            
                a[t+1]=a[t];
            }
            g++;
            a[i+1]=100;
            }
        }
    
    n=g;
    
}

void Irasymas (const char FW[], int n,  int a[], int min)
{
   ofstream fw(FW, ios::app);
    for(int i=0; i<n; i++)
  {
     if(a[i]==69)
     {
       fw<<" ";
         
     }
       if(a[i]!=69)
       {
       fw<<a[i]<<" ";
       }
      
  }
  fw.close();
}
///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
////////////////////////////////////
/////////////
#include<fstream>
#include <iostream>
#include <algorithm> // until c++11
#include <utility>
#include <cmath>
#include <vector>

const char FR[]="duom.txt";
using namespace std;
struct Duomenys
{
    string vardas;
    char lytis;
    int ugis;
};
void Skaityti(const char FR[], int &n, Duomenys A[]);
void Rykiuoti(int n, Duomenys A[]);
int main()
{
    Duomenys A[100];
    int n;
    Skaityti(FR,n,A);
    Rykiuoti(n,A);
    return 0;
}

void Skaityti(const char FR[], int &n, Duomenys A[])
{
   ifstream fr(FR);
   fr>>n;
   for(int i=0;i<n;i++)
   {
       fr>>A[i].vardas>>A[i].lytis>>A[i].ugis;
       //cout<<A[i].vardas<<" "<<A[i].lytis<<" "<<A[i].ugis<<endl;
   }

   fr.close();
   
}

void Rykiuoti(int n, Duomenys A[])
{
    for(int i=0;i<n;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            if(A[i].ugis<A[j].ugis)
            {
                swap(A[i],A[j]);
            }
        }
    }
    for(int i=0;i<n;i++)
    {
        cout<<A[i].vardas<<" "<<A[i].lytis<<" "<<A[i].ugis<<endl; 
    }
    vector<Duomenys>duomenys;
    for(int i=0;i<n;i++)
    {
        //cout<<A[i].vardas<<" "<<A[i].lytis<<" "<<A[i].ugis<<endl; 
        if(A[i].lytis=='w')
        {
            int a=i-1;
            cout<<i;
            duomenys.erase(duomenys.begin());
        }
        
    }
     for(int i=0;i<n;i++)
    {
        cout<<A[i].vardas<<" "<<A[i].lytis<<" "<<A[i].ugis<<endl; 
    }
}

//////////////////////////////
//////////////
///////
3
baxuras m 190
moteeris m 180
baxuras w 210

////////////////////////////////////////////////
///////////////////////////////////////////
//////////////////////////




#include <iostream>
#include <fstream>
const char FR[]="duom.txt";
const char FW[]="ats.txt";
const int Max=25;
using namespace std;

struct Duomenys{
 string vardas;
 char  lytis;
 int atlyginimas;
};
void Skaityti (const char FR[], int &n, Duomenys A[]);
void naikiname(Duomenys A[], int &n);
void Rikiavimas (Duomenys A[], int n);
void Irasymas (const char FW[], int n, Duomenys A[]);

int main()
{
    Duomenys A[100];
    int n,k;
    Skaityti(FR,n, A);
    naikiname(A,n);
    Rikiavimas (A,n);
    Irasymas (FW,n,A);
    return 0;
}
void Skaityti (const char FR[], int &n, Duomenys A[])
{
    ifstream fr(FR);
    fr>>n;
    char name[Max+1];
    fr.ignore();
    for(int i=0; i<n;i++)
    {
        fr.get(name,Max);
        A[i].vardas=name;
        fr>>A[i].lytis>>A[i].atlyginimas;
        fr.ignore();
    }
   fr.close();
}
void naikiname(Duomenys A[], int &n)
{
    for(int i=0; i<n; i++)
  {
        if(A[i].lytis=='m' || A[i].atlyginimas < 800)
           {
               for(int j=i; j<n;j++)
                 {
                   A[j]=A[j+1];
                 }
              i--;
              n--;
           }
    }
  }

void Rikiavimas (Duomenys A[], int n)
{
    for(int i=0;i<n;i++)
    {
      for(int j=i+1;j<n;j++)
      {
          if(A[i].atlyginimas<A[j].atlyginimas)
          {
              swap(A[i],A[j]);

          }
      }
    }
}

void Irasymas (const char FW[], int n, Duomenys A[])
{
  ofstream fw(FW);
  for(int i=0; i<n;i++)
    {
        fw<<A[i].vardas<<" "<<A[i].lytis<<" "<<A[i].atlyginimas<<endl;
    }
    fw.close();
}


////////////////////
////////////////
//////////

8
Giedrius Girdauskas     v 700
Lina Joksaite           m 700
Stasys Stasytis         v 1500
Gita Gitaite            m 1600
Romas Lydeka            v 800
Kajus Vibelis           v 750
Kajus Lasys             v 760
Gitanas Gytis           v 900
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
/////////////////////////////////////////
////////////////////////////
////////////
//////
//
/
#include <iostream>
#include <fstream>
const char FR[]="duom.txt";
const char FW[]="ats.txt";
const int Max=20;
using namespace std;

struct Duomenys{
 string vardas;
 char  lytis;
 int atlyginimas;
};
void Skaityti (const char FR[], int &n, Duomenys A[]);
void naikiname(Duomenys A[], int &n);
void Rikiavimas (Duomenys A[], int n);
void Iterpiame(Duomenys A[], int &n);
void Irasymas (const char FW[], int n, Duomenys A[]);

int main()
{
    Duomenys A[100];
    int n;
    Skaityti(FR,n, A);
    naikiname(A,n);
    Rikiavimas (A,n);
    Iterpiame (A,n);
    Irasymas (FW,n,A);
    return 0;
}
void Skaityti (const char FR[], int &n, Duomenys A[])
{
    ifstream fr(FR);
    fr>>n;
    char name[Max+1];
    fr.ignore();
    for(int i=0; i<n;i++)
    {
        fr.get(name,Max);
        A[i].vardas=name;
        fr>>A[i].lytis>>A[i].atlyginimas;
        fr.ignore();
    }
   fr.close();
}
void naikiname(Duomenys A[], int &n)
{
    for(int i=0; i<n; i++)
  {
        if(A[i].lytis=='m' || A[i].atlyginimas < 800)
           {
               for(int j=i; j<n;j++)
                 {
                   A[j]=A[j+1];
                 }
              i--;
              n--;
           }
    }
  }
  void Iterpiame(Duomenys A[], int &n)
{
    int g=n;
    for(int i=0; i<g;i++){
        if(A[i].atlyginimas==800){
            for(int t=g;t>i;t--)
            {

                A[t+1].atlyginimas=A[t].atlyginimas;
            }
            g++;
            A[i+1].atlyginimas=100;
            }
        }

    n=g;
}

void Rikiavimas (Duomenys A[], int n)
{
    for(int i=0;i<n;i++)
    {
      for(int j=i+1;j<n;j++)
      {
          if(A[i].atlyginimas<A[j].atlyginimas)
          {
              swap(A[i],A[j]);

          }
      }
    }
}

void Irasymas (const char FW[], int n, Duomenys A[])
{
  ofstream fw(FW);
  for(int i=0; i<n;i++)
    {
        fw<<A[i].vardas<<" "<<A[i].lytis<<" "<<A[i].atlyginimas<<endl;
    }
    fw.close();
}
/////////////
////////////////////////////////////////
//////////////////////////////////////////////////////////


#include <iostream>
#include <fstream>
const char FR[]="duom.txt";
const char FW[]="ats.txt";
const int Max=26;
const int Max2=5;
using namespace std;

struct Duomenys{
 string vardas, lytis;
 int atlyginimas;
};
struct Duomenys2{
string vardas, lytis;
 int atlyginimas;
};
void Skaityti (const char FR[], int &n, Duomenys A[], Duomenys2 B[]);
void Rikiavimas (Duomenys A[], int n);
void Iterpiame(Duomenys A[], int &n, Duomenys2 B[]);
void Irasymas (const char FW[], int n, Duomenys A[]);

int main()
{
    Duomenys A[100];
    Duomenys2 B[100];
    int n;
    Skaityti(FR,n, A, B);
    Rikiavimas (A,n);
    Iterpiame (A,n, B);
    Irasymas (FW,n,A);
    return 0;
}
void Skaityti (const char FR[], int &n, Duomenys A[], Duomenys2 B[])
{
    ifstream fr(FR);
    fr>>n;
    char name[Max+1], lytisz[Max2+1];
    fr.ignore();
    for(int i=0; i<n;i++)
    {
        fr.get(name,Max);
        A[i].vardas=name;
        fr.get(lytisz,Max2);
        A[i].lytis=lytisz;
        fr>>A[i].atlyginimas;
        fr.ignore();
    }
     fr.ignore(100,'\n');
    for(int i=0; i<1;i++)
    {
        fr.get(name,Max);
        B[i].vardas=name;
        fr.get(lytisz,Max2);
        B[i].lytis=lytisz;
        fr>>B[i].atlyginimas;
        fr.ignore();
    }
   fr.close();
}
void Rikiavimas (Duomenys A[], int n)
{
    for(int i=0;i<n;i++)
    {
      for(int j=i+1;j<n;j++)
      {
          if(A[i].atlyginimas<A[j].atlyginimas)
          {
              swap(A[i],A[j]);

          }
      }
    }
}
  void Iterpiame(Duomenys A[], int &n, Duomenys2 B[])
{
    int g=n;
    int j=0;
    for(int i=0; i<g;i++){
        if(A[i+1].atlyginimas<B[0].atlyginimas && A[i-1].atlyginimas>B[0].atlyginimas && A[i].vardas!=B[0].vardas){
            for(int t=g;t>i;t--)
            {

                A[t+1]=A[t];
            }
            g++;
            A[i+1].vardas=B[0].vardas;
            A[i+1].lytis=B[0].lytis;
            A[i+1].atlyginimas=B[0].atlyginimas;
            }
        }
    n=g;
}


void Irasymas (const char FW[], int n, Duomenys A[])
{
  ofstream fw(FW);
  for(int i=0; i<n;i++)
    {
        fw<<A[i].vardas<<" "<<A[i].lytis<<" "<<A[i].atlyginimas<<endl;
    }
    fw.close();
}
/////////////////////////////////////////
//////////////

8
Giedrius Girdauskas      vyr. 700
Lina Juksaite            mot. 700
Stasys Stalytis          vyr. 1500
Gida Giraite             mot. 1600
Romas Lydeka             vyr. 800
Kajus Vigelis            mot. 750
Kajus Lasys              vyr. 760
Gitanas Gytis            vyr. 900

Vaidas Reglaitis         vyr. 755


