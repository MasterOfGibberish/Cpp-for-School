#include <iostream>
#include <fstream>
#include <cmath>
#include <string>
const char SF[]="duom.txt";
const char RF[]="ans.txt";

using namespace std;
struct Duomenys
{
    string miestas;
    int kiekis;
    int vieta=0;
    int n=0;
    int A[20]={0};
    int vidurkis[2];
    int prizine=0;
};

void Skaityti (const char SF[], Duomenys A[], int &n1);

int main()
{
    int prizine[100];
    int n1;
    Duomenys A[3];
    Skaityti(SF,A, n1);
    return 0;
}

void Skaityti(const char SF[], Duomenys A[], int &n1)
{
    int k=0;
    int vidurkis=0;
    ifstream sf(SF);
    ofstream rf(RF);
     sf>>n1;
     for(int i=0; i<n1;i++)
     {
         sf>>A[i].miestas>>A[i].kiekis;
         for(int j=0; j<A[i].kiekis; j++)
         {
             sf>>A[i].A[i];
             vidurkis+=A[i].A[i];
             if(A[i].A[i]>0 && A[i].A[i]<4)
             {
               A[i].prizine++;
             }
         }
         vidurkis=vidurkis/A[i].kiekis;
         A[i].vidurkis[i]=vidurkis;
         vidurkis=0;
         rf<<A[i].miestas<<"  "<<A[i].vidurkis[i]<<" vieta"<<endl;
     }
       rf<<" "<<endl;
    rf<<"Daugiausiai medaliu iskovojes miestas:"<<endl;
       int maxx=0;
    for(int i=0; i<n1; i++)
        {
        if(A[i].prizine>=maxx)
        {
            maxx=A[i].prizine;
        }
    }
    for(int i=0; i<n1; i++)
    {
        if(A[i].prizine==maxx)
        {
            rf<<A[i].miestas<<"   "<<A[i].prizine<<" prizines vietos"<<endl;
        }
    }
}
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
////////rinktine ////////////////////////


#include <iostream>
#include <fstream>
#include <cmath>
#include <string>
const char SF[]="duom.txt";
const char RF[]="ans.txt";

using namespace std;
struct Duomenys
{
  string vardas;
  string pavarde;
  string pozicija;
  int ugis;
  int svoris;
  int metai;
};

void Skaityti (const char SF[], Duomenys A[], int &n1);
void Vyriausias (Duomenys A[], int n1, int &vyriausias);
void Irasyti(const char RF[], Duomenys A[], int n1, int vyriausias);

int main()
{  
    int n1, vyriausias;
    Duomenys A[12];
    Skaityti(SF, A, n1);
    Vyriausias(A,n1, vyriausias);
    Irasyti(RF,A,n1, vyriausias);
    return 0;
}

void Skaityti(const char SF[], Duomenys A[], int &n1)
{
    ifstream sf(SF);
     sf>>n1;
     for(int i=0; i<n1;i++)
     {
      sf>>A[i].vardas>>A[i].pavarde>>A[i].pozicija>>A[i].ugis>>A[i].svoris>>A[i].metai;
     }
 
}
void Vyriausias (Duomenys A[], int n1, int &vyriausias)
{
     vyriausias=0;
    for(int i=0; i<n1;i++)
    {
        if(A[i].metai>=vyriausias)
        {
            vyriausias=A[i].metai;
        }
    }
}
void Irasyti(const char RF[],Duomenys A[], int n1, int vyriausias)
{
    ofstream rf(RF);
    for(int i=0; i<n1;i++)
     {
         if(A[i].metai==vyriausias)
         {
             rf<<" Vyriausias Lietuvos krepsinio rinktines zaidejas:"<<endl;
             rf<<A[i].vardas<<" "<<A[i].pavarde<<" "
            <<A[i].pozicija<<" "<<A[i].ugis<<" "<<"cm"<<" "<<A[i].svoris<<" "<<"KG"<<
            " "<<A[i].metai<<" "<<"metai"<<endl;
         }
     }
      rf<<" "<<endl;
      rf<<"Lietuvos rinktines puolejai:"<<endl;
   for(int i=0; i<n1;i++)
     {
         if(A[i].pozicija=="PF" || A[i].pozicija=="SF")
        {
        rf<<A[i].vardas<<" "<<A[i].pavarde<<" "
            <<A[i].pozicija<<" "<<A[i].ugis<<" "<<"cm"<<" "<<A[i].svoris<<" "<<"KG"<<
            " "<<A[i].metai<<" "<<"metai"<<endl;
        } 
    }
}


///////////////////////////////////////////////////////////////////////////////////


#include <iostream>
#include <fstream>
#include <cmath>
#include <string>

const char SF[]="duom.txt";
const char RF[]="ans.txt";
const int CMax= 12;
const int CPav= 20;

using namespace std;

struct Duomenys
{
  string vardas;
  int balsai;
};

void Skaityti (const char SF[], int &n, string bals[], string dalyv[], int &raktas);
void Skaiciuoti (Duomenys A[], string dalyv[], int n, int &max);
void Irasymas (const char RF[], Duomenys A[], int max, int raktas);

int main()
{  
    int n, max, raktas;
    Duomenys A[CMax];
    string bals[50], dalyv[50];
    Skaityti(SF, n, bals, dalyv, raktas);
    Skaiciuoti(A, dalyv, n, max);
    Irasymas(RF, A, max, raktas);
    return 0;
}

void Skaityti(const char SF[], int &n, string bals[], string dalyv[], int &raktas)
{
    raktas=0;
    ifstream sf(SF);
    char temp[CMax+1], temp2[CPav+1];
     sf>>n;
     sf.ignore(80, '\n');
     for(int i=0; i<n;i++)
     {
            sf.get(temp, CMax, '.');
            sf.ignore(2);
             sf.get(temp2, CPav, ' ');
             bals[i]= temp;
             dalyv[i]= temp2;
             sf.ignore(80, '\n');
         
     }
     
     for(int i=0; i<n;i++)
     {
         for(int j=i+1; j<n;j++)
         {
             if(bals[i]==bals[j])
             {
                raktas=1;
             }
             
         }
         
     }
}

void Skaiciuoti(Duomenys A[], string dalyv[], int n, int &max)
{
     A[0].balsai=0;
     A[1].balsai=0;
     A[2].balsai=0;
     A[3].balsai=0;
    for(int i=0; i<n;i++)
     {
         if(dalyv[i]=="Vaidotas")
         {
             A[0].balsai++;
             A[0].vardas="Vaidotas Vaicius";
         }
         if(dalyv[i]=="Lukas")
         {
             A[1].balsai++;
             A[1].vardas="Lukas Kulnelis";
         }
         if(dalyv[i]=="Tadas")
         {
             A[2].balsai++;
             A[2].vardas="Tadas Liutika";
         }
         if(dalyv[i]=="Justinas")
         {
             A[3].balsai++;
             A[3].vardas="Justinas Meleta";
         }
     }
     max=0;
     for(int i=0; i<4; i++)
    {
       if(A[i].balsai>max)
       {
           max=A[i].balsai;
       }
    }
}

void Irasymas (const char RF[], Duomenys A[], int max, int raktas)
{
    ofstream rf(RF);
    if(raktas==1)
    {
        rf<<"RINKIMAI SUKLASTOTI!!!";
    }
    else
    {
        for(int i=0; i<4; i++)
        {
             if(A[i].balsai==max)
             {
                 rf<<"laimejo:  "<<A[i].vardas<<" surinkes: "<<max<<" balsus"<<endl;
                 rf<<" "<<endl;
                 rf<<"Visu balsu suvestine:"<<endl;
             }
            rf<<A[i].vardas<<" "<<A[i].balsai<<endl;
        }
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////
//////////////////////////
void Naikiname(Duomenys A[], int n)
{
  for(int i=0; i<n; i++)
    {
        for(int j=i+1; i<n;j++)
        {
            if((A[i].vardas==A[j].vardas) && (A[i].pavarde==A[j].pavarde))
            {
                cout<<"yvgvghvghv ";

            }
        }
    }

}
////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <fstream>
#include <cmath>
#include <string>
const char SF[]="duom.txt";
const char SF2[]="duom2.txt";
const char RF[]="akatsukai.txt";

using namespace std;
struct Duomenys
{
  string vardas;
  string pavarde;
  string pozicija;
  int ugis;
  int svoris;
  int metai;
};

void Skaityti (const char SF[],const char SF2[], Duomenys A[], int n1, int n2, int &n);
void Vyriausias (Duomenys A[], int n, int &vyriausias);
void Irasyti(const char RF[], Duomenys A[], int n, int vyriausias);

int main()
{
    int n1,n2,n, vyriausias;
    Duomenys A[50];
    Skaityti(SF,SF2, A, n, n2, n);
   Vyriausias(A,n, vyriausias);
    Irasyti(RF,A,n, vyriausias);
    return 0;
}

void Skaityti(const char SF[],const char SF2[], Duomenys A[],int n1, int n2, int &n)
{
    ifstream sf(SF);
     ifstream sf2(SF2);
     sf>>n1;
     sf2>>n2;
     n=n1+n2;
     for(int i=0; i<n1;i++)
     {
      sf>>A[i].vardas>>A[i].pavarde>>A[i].pozicija>>A[i].ugis>>A[i].svoris>>A[i].metai;
     }
     for(int i=n1; i<n1+n2;i++)
     {
         sf2>>A[i].vardas>>A[i].pavarde>>A[i].pozicija>>A[i].ugis>>A[i].svoris>>A[i].metai;
     }


}
void Vyriausias (Duomenys A[], int n, int &vyriausias)
{
     vyriausias=0;
    for(int i=0; i<n;i++)
    {
        if(A[i].ugis>=vyriausias)
        {
            vyriausias=A[i].ugis;
        }
    }

}
void Irasyti(const char RF[],Duomenys A[], int n, int vyriausias)
{
       ofstream rf(RF);
    for(int i=0; i<n;i++)
     {
         if(A[i].ugis==vyriausias)
         {
             rf<<" Vyriausias Lietuvos krepsinio rinktines zaidejas:"<<endl;
             rf<<A[i].vardas<<" "<<A[i].pavarde<<" "
            <<A[i].pozicija<<" "<<A[i].ugis<<" "<<"cm"<<" "<<A[i].svoris<<" "<<"KG"<<
            " "<<A[i].metai<<" "<<"metai"<<endl;
         }
     }
      rf<<" "<<endl;
      rf<<"Lietuvos rinktines puolejai:"<<endl;
   for(int i=0; i<n;i++)
     {
         if(A[i].pozicija=="PF" || A[i].pozicija=="SF")
        {
         rf<<A[i].vardas<<" "<<A[i].pavarde<<" "
            <<A[i].pozicija<<" "<<A[i].ugis<<" "<<"cm"<<" "<<A[i].svoris<<" "<<"KG"<<
            " "<<A[i].metai<<" "<<"metai"<<endl;
        } 
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////RINKITINE 110PSL//////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <fstream>
#include <cmath>
#include <string>

const char FR[]="duom.txt";
const char FW[]="ans.txt";
using namespace std;

struct Duomenys{
    string vardas;
    double ugis, taskai;
};

void Skaityti(const char FR[], Duomenys A[], int &n, int &p, int &k);
void Skaiciuoti(Duomenys A[], int n, int p, int k, int &auksciausias, int &g);
void Irasyti (const char FW[], int n, Duomenys A[], int g, int k);
int main()
{
  int n,p,k,g, auksciausias;
  Duomenys A[40];
  Skaityti(FR, A, n, p, k);
  Skaiciuoti(A,n,p,k, auksciausias, g);
  Irasyti(FW, n, A, g, k);

    return 0;
}

void Skaityti(const char FR[], Duomenys A[], int &n, int &p, int &k)
{
     ifstream fr(FR);
     fr>>n;
     for(int i=0; i<n;i++)
     {
      fr>>A[i].vardas>>A[i].ugis>>A[i].taskai;
     }
     fr>>p>>k;
}

void Skaiciuoti(Duomenys A[], int n, int p, int k, int &auksciausias, int &g)
{
    double procentas=0;
    auksciausias=0;
    g=0;
    procentas=(100-p)*0.01;
    for(int i=0; i<n; i++)
    {
     if(A[i].ugis>=auksciausias)
        {
            auksciausias=A[i].ugis;
        }
    }
    g = auksciausias*procentas;

}

void Irasyti (const char FW[], int n, Duomenys A[], int g, int k)
{
    ofstream fw(FW);
    fw<<"VARDAS UGIS TASKAI:"<<endl;
    for(int i=0; i<n; i++)
    {
       if(A[i].ugis>=g || A[i].taskai>=k)
       {
           fw<<A[i].vardas<<"  "<<A[i].ugis<<"  "<<A[i].taskai<<endl;
       }
    }
}
//////////////////////////////////////////

/////////////////////////////////


#include <iostream>
#include <fstream>
#include <cmath>
#include <string>
#include <iomanip>

const char FR[]="duom.txt";
const char FR2[]="duom2.txt";
const char FW[]="ans.txt";

using namespace std;
struct Duomenys{
   string vardas;
   string pavarde;
   int butonr;
   double siluma, elektra, vanduo;
};
void Skaityti (const char FR[], const char FR2[], Duomenys A[], int &n);
void Skaiciuojame(Duomenys A[],int &n);
void Irasome(const char FW[], Duomenys A[], int n);
int main()
{
   int n;
   Duomenys A[200];
   Skaityti(FR,FR2,A,n);
   Skaiciuojame(A,n);
   Irasome(FW,A,n);
    return 0;
}
void Skaityti(const char FR[], const char FR2[], Duomenys A[], int &n)
{
    int m=0;
    ifstream fr(FR);
    ifstream fr2(FR2);
    fr>>n;
    for(int i=0; i<n; i++)
    {
        fr>>A[i].vardas>>A[i].pavarde>>A[i].butonr>>A[i].siluma>>A[i].elektra>>A[i].vanduo;
    }
    fr2>>m;
    for(int i=5; i<n+m; i++)
    {
        fr2>>A[i].vardas>>A[i].pavarde>>A[i].butonr>>A[i].siluma>>A[i].elektra>>A[i].vanduo;
    }
    n=n+m;
}

void Skaiciuojame(Duomenys A[], int &n)
{
    int k=0;
    for(int i=0; i<n;i++)
    {
        for(int j=i+1;j<n;j++)
        {
           if(A[i].vardas==A[j].vardas && A[i].pavarde==A[j].pavarde)
           {
              A[i].siluma+=A[j].siluma;
              A[i].elektra+=A[j].elektra;
              A[i].vanduo+=A[j].vanduo;
              k++;
           }
        }
    }
    n-=k;
}
void Irasome(const char FW[], Duomenys A[], int n)
{
    ofstream fw(FW);
    fw<<"--------------------------------------------------------"<<endl;
    fw<<" Vardas, pavarde   Buto nr.  Sildymas  Elektra  Vanduo"<<endl;
    fw<<"--------------------------------------------------------"<<endl;
    for(int i=0;i<n;i++)
    {
        fw<<fixed<<setprecision(2)<<A[i].vardas<<" "<<A[i].pavarde<<" "<<A[i].butonr<<" "<<
        A[i].siluma<<" "<<A[i].elektra<<" "<<A[i].vanduo<<endl;
    }
    fw<<"---------------------------------------------------"<<endl;
    fw<<" "<<endl;
    fw<<" "<<endl;
    fw<<"--------------------------------------------------------"<<endl;
    fw<<" Vardas, pavarde   Buto nr.  Sildymas  Elektra  Vanduo"<<endl;
    fw<<"--------------------------------------------------------"<<endl;
    for(int i=0;i<n;i++)
    {
        if(A[i].elektra<0 || A[i].siluma<0 || A[i].vanduo<0 )
        {
             fw<<fixed<<setprecision(2)<<A[i].vardas<<" "<<A[i].pavarde<<" "<<A[i].butonr<<" "<<
             A[i].siluma<<" "<<A[i].elektra<<" "<<A[i].vanduo<<endl;
        }
    }
    fw<<"---------------------------------------------------"<<endl;
}
///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////Prekes 138psl.//////////////////////////////

#include <iostream>
#include <fstream>
#include <iomanip>
const char FR[]="duom.txt";
const char FW[]="ats.txt";
const int Max=20;
const int data=11;

using namespace std;

struct Duomenys{
  string pavadinimas,galiojimas;
  int vartojimas;
};
void Skaityti(const char FR[], Duomenys A[], int &n);
void Tikrinimas(Duomenys A[], int n, string &kintamasis, string &kintamasis2);
void Irasymas(const char FW[], Duomenys A[], int n, string kintamasis, string kintamasis2);

int main()
{ int n;
   string kintamasis, kintamasis2;
    Duomenys A[100];
    Skaityti(FR,A,n);
    Tikrinimas(A,n, kintamasis, kintamasis2);
    Irasymas(FW, A, n, kintamasis, kintamasis2);
    return 0;
}

void Skaityti(const char FR[], Duomenys A[], int &n)
{
    ifstream fr(FR);
    int k=0;
    char name[Max+1], laikas[data+1];
    fr>>n;
    fr.ignore(80,'\n');
    for(int i=0;i<n;i++)
    {
        fr.get(name,Max,'2');
        A[i].pavadinimas=name;
        fr.get(laikas, data);
        A[i].galiojimas=laikas;
        fr>>k;
        A[i].vartojimas=k;
        fr.ignore(80,'\n');
    }
}

void Tikrinimas(Duomenys A[], int n, string &kintamasis, string &kintamasis2)
{
    kintamasis="";
    kintamasis2="";
    string ivestis="";

    string belekas=""; //naudojamas tik, kad teisingai perskaitytu duomenis, taciau jis niekur nenaudojamas
    cout<<"iveskite galiojimo data: "<<endl;

    getline(cin,ivestis,'\n');
    kintamasis=ivestis;
    getline(cin, ivestis, '\n');
    kintamasis2=ivestis;
    getline(cin, belekas, '\n');
    cout<<"-------------------------------"<<endl;
    cout<<"jus ivedete"<<" "<<kintamasis<< " -"<<kintamasis2<<endl;
    cout<<"-------------------------------"<<endl;


}
void Irasymas(const char FW[], Duomenys A[], int n, string kintamasis, string kintamasis2)
{
    int k=0;
    int g=0;
    double j=0.0;
    ofstream fw(FW);
    fw<<"-------------------------------"<<endl;
    for(int i=0; i<n;i++)
    {
        if(A[i].galiojimas>=kintamasis && A[i].galiojimas<=kintamasis2)
        {
              fw<<A[i].pavadinimas<<" "<<A[i].galiojimas<<" "<<A[i].vartojimas <<endl;
              g+=A[i].vartojimas;
              k++;
        }
    }
    fw<<"-------------------------------"<<endl;
    j=double(g/k);
    cout<<k;
    fw<<fixed<<setprecision(2)<<"Vartojimo vidurkis "<<j<<endl;

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <fstream>>
const char FR[]="duom.txt";
const char FW[]="Ats.txt";
const int Max=20;
const int Max1=11;

using namespace std;
struct Duomenys{
   string vardas;
   int metai, menuo, diena, para;
    double mokestis;
};
void Skaityti(const char FR[], Duomenys A[], int &n);
void Skaiciuoti(Duomenys A[], int n);
int main()
{
    int n;
   Duomenys A[100];
   Skaityti(FR,A,n);
   Skaiciuoti(A,n);
    return 0;
}
void Skaityti(const char FR[], Duomenys A[], int &n)
{
    ifstream fr(FR);
    fr>>n;
    int k=0;
    double g=0;
    char name[Max+1];
    int laikas[Max1+1];
    fr.ignore(80,'\n');
    for(int i=0; i<n;i++)
    {
        fr.get(name, Max,'2');
        A[i].vardas=name;
        fr.get(laikas,Max1);
        A[i].data=laikas;
        fr>>k;
        A[i].para=k;
        fr>>g;
        A[i].mokestis=g;
        fr.ignore(80,'\n');
    }
}
void Skaiciuoti(Duomenys A[], int n)
{
    for(int i=0;i<n;i++)
    {
      cout<<A[i].data<<endl;
    }

}

//////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// VIESBUCIO GYVENTOJAI 138 PSL

#include <iostream>
#include <fstream>
const char FR[]="duom.txt";
const char FW[]="Ats.txt";
const int Max=20;

using namespace std;
struct Duomenys{
   string vardas;
   int metai, menuo, diena, para;
    double mokestis;
};
struct Duomenys2{
   int metai2, menuo2, diena2;
};
void Skaityti(const char FR[], Duomenys A[], int &n);
void Skaiciuoti(Duomenys A[], int n, Duomenys2 B[]);
void Irasyti (const char FW[], Duomenys A[], int n, Duomenys2 B[]);
int main()
{
    int n;
   Duomenys A[100];
   Duomenys2 B[100];
   Skaityti(FR,A,n);
   Skaiciuoti(A,n, B);
   Irasyti(FW, A, n,B);
    return 0;
}
void Skaityti(const char FR[], Duomenys A[], int &n) //Perskaitome
{
    ifstream fr(FR);
    fr>>n;
    char name[Max+1];
    fr.ignore(80,'\n');
    for(int i=0; i<n;i++)
    {
        fr.get(name, Max,'2');
        A[i].vardas=name;
        fr>>A[i].metai>>A[i].menuo>>A[i].diena>>A[i].para>>A[i].mokestis;
        fr.ignore(80,'\n');
    }
    fr.close();
}
void Skaiciuoti(Duomenys A[], int n, Duomenys2 B[]) 
{
    for(int i=0;i<n;i++)
    {
      A[i].mokestis=A[i].mokestis*A[i].para; //suskaiciuoju mokesti
      
      B[i].metai2=A[i].metai; //prilyginu jog issaugociau atvykimo data
      B[i].menuo2=A[i].menuo;
      B[i].diena2=A[i].diena;
    }
        for(int i=0;i<n;i++) //skaiciuoja isvykimo data (yra paklaida nes imu 30 dienas uz menesi)
        {
            for(int j=0;j<A[i].para;j++)
            {
                if(A[i].diena<=30)
                {
                    A[i].diena++;
                }
                if(A[i].diena>30)
                {
                    A[i].diena=0;
                    A[i].menuo++;
                }
                if(A[i].menuo>12)
                {
                    A[i].menuo=1;
                    A[i].metai++;
                }
            }
      }
      
      for(int i=0; i<n;i++) //surusiuojama pagal mokesti
      {
          for(int j=i+1;j<n;j++)
          {
              if(A[i].mokestis<A[j].mokestis)
              {
                  swap(A[i],A[j]);
              }
          }
      }
}
void Irasyti (const char FW[], Duomenys A[], int n, Duomenys2 B[])
{
    ofstream fw(FW);
    fw<<"Vardas, Pavarde      Atvyko   Isvyko     Sumokejo"<<endl;
    fw<<"----------------------------------------------------"<<endl;
     for(int i=0;i<n;i++)
    {
       fw<<A[i].vardas<<" "<<B[i].metai2<<" "<<B[i].menuo2<<" "<<B[i].diena2
       <<"   "<<A[i].metai<<" "<<A[i].menuo<<" "<<A[i].diena<<"     "<<A[i].mokestis<<endl;
    }
        fw<<"----------------------------------------------------"<<endl;
    fw.close();
}
///////////////////////////////////////////////////////////////////////////////
//Duomenys:
3 
Pirmas Petras 2010 12 25 15 25.5 
Antrute Jurgita 2011 01 15 65 24.36 
Pilkoji Pelyte 2010 11 01 155 0.1

/////////////////////////////////////////////////////////////////////////////////////////
//////////////////     ABONENTAI   138PSL.
#include <iostream>
#include <fstream>
#include <iomanip>
const char FR[]="duom.txt";
const char FR2[]="duom2.txt";
const char FW[]="akatsukai.txt";
const int Max=20;
using namespace std;

struct Duomenys{
  string vardas;
  int numeris;
  string miestas;
  double laikas;
};
struct Duomenys2{
  string miestas2;
  double kaina;
};
void Skaityti(const char FR[],const char FR2[], Duomenys A[], Duomenys2 B[], int &n, int &m);
void Skaiciuojame (Duomenys A[], Duomenys2 B[],int &n, int m);
void Irasyti(const char FW[], Duomenys A[], int n);

int main()
{ 
    int n,m;
    Duomenys A[100];
    Duomenys2 B[100];
    Skaityti(FR,FR2,A,B,n,m);
    Skaiciuojame(A,B,n,m);
    Irasyti(FW,A,n);
    return 0;
}
void Skaityti(const char FR[],const char FR2[], Duomenys A[], Duomenys2 B[],int &n, int &m)
{
    ifstream fr(FR);
    char name[Max+1];
    fr>>n;
    fr.ignore(100,'\n');
    for(int i=0;i<n;i++)
    {
        fr.get(name,Max,'8');
        A[i].vardas=name;
        fr>>A[i].numeris>>A[i].miestas>>A[i].laikas;
        fr.ignore(100,'\n');
    }
    fr.close();
    
    ifstream fr2(FR2);
    fr2>>m;
    for(int i=0;i<m;i++)
    {
        fr2>>B[i].miestas2>>B[i].kaina;
    }
}

void Skaiciuojame (Duomenys A[], Duomenys2 B[],int &n, int m)
{
    int k=0;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(A[i].miestas==B[j].miestas2)
            {
                k++;
                A[i].laikas=A[i].laikas*B[j].kaina;
            }
        }
    }
    n=k;
}

void Irasyti(const char FW[], Duomenys A[], int n)
{
    double k=0;
    ofstream fw(FW);
    fw<<"Vardas, Pavarde       Mokestis"<<endl;
    fw<<"---------------------------------------"<<endl;
    for(int i=0;i<n;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            if(A[i].vardas==A[j].vardas)
            {
                A[i].laikas=A[j].laikas+A[i].laikas;
                A[j].vardas="pasikartojantis ";
            }
        }
        if(A[i].vardas!="pasikartojantis ")
        {
            k+=A[i].laikas;
          fw<<fixed<<setprecision(2)<<A[i].vardas<<A[i].laikas<<endl;  
        }
    }
    fw<<"---------------------------------------"<<endl;
    fw<<"Pajamos: "<<k<<endl;
}


////////////////////////////////////
//////Duomenys:
5
Pirmasis Petras     86959595 Klaipeda 12
Antrute Jurgita     86959594 Klaipeda 24
Jugutis Jurgis      86959593 Vilnius 12
Antrute Jurgita     86949592 Vilnius 15
Rimutis Rimas       86959591 Raseiniai 12

7
Ariogala 12.5
Baisiogala 6.25
Klaipeda 10.89
Kaunas 5.5 
Raseiniai 6.5 
Vilnius 5.68
Voskoniai 7.8



\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
8 6
Kava "Domino"                3
Arbata "Soliraris"           3
Sumuštinis "O-lia-lia"       5
Sultys "Multi"               2
Oriniai pyragėliai           3
Bandelė "Paris"              4
Viščiukas "Kakadu"           15
Kepsnys "Sapnas"             20
4 0 4 0 0 0 0 0
0 5 1 0 2 2 0 0
2 5 0 2 7 2 6 1
0 0 6 6 0 0 0 0
6 0 3 3 0 0 3 3
0 5 0 5 0 0 0 5
///////////////////////////////////////////////
/////////////////////////
#include<fstream>
#include <iostream>
const char FR[]="duom.txt";
const char FW[]="ats.txt";
const int Max=24;
using namespace std;
typedef int masyvas[100][100];
struct Duomenys{
    string pavadinimas;
    int kaina;
    int suma;
};
void Skaityti(const char FR[], Duomenys A[], int &n, int &m, masyvas B);
void Skaiciuoti (Duomenys A[], int n,int m, masyvas B, int &didz, int &indeksas);
void Irasyti(const char FW[], Duomenys A[], masyvas B, int n, int didz, int indeksas);
int main()
{
    masyvas B;
    int n,m, didz, indeksas;
    Duomenys A[100];
    Skaityti(FR,A,n,m, B);
    Skaiciuoti(A,n,m,B, didz, indeksas);
    Irasyti(FW, A, B, n, didz, indeksas);
    return 0;
}

void Skaityti(const char FR[], Duomenys A[], int &n, int &m,  masyvas B)
{
    ifstream fr(FR);
    char name[Max+1];
    fr>>n>>m;
    fr.ignore(100,'\n');
    for(int i=0;i<n;i++)
    {
        fr.get(name,Max);
        A[i].pavadinimas=name;
        fr>>A[i].kaina;
        //cout<<A[i].pavadinimas<<" "<<A[i].kaina<<endl;
        fr.ignore(100,'\n');
    }
    for(int i=0; i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            fr>>B[i][j];
            //cout<<B[i][j]<<" ";
        }
        //cout<<endl;
    }
    fr.close();
}

void Skaiciuoti (Duomenys A[], int n, int m, masyvas B, int &didz, int &indeksas)
{
    int sum=0;
    for(int i=0; i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            sum=B[i][j]*A[j].kaina;
            A[i].suma+=sum;
        }
    }
    for(int i=0; i<m;i++)
    {
     if(A[i].suma>didz)
     {
         didz=A[i].suma;
         indeksas=i;
     }
    }
}

void Irasyti(const char FW[], Duomenys A[], masyvas B, int n, int didz, int indeksas)
{
    ofstream fw(FW);
    for(int i=0;i<n;i++)
    {
        if(!B[indeksas][i]==0)
        {
            fw<<A[i].pavadinimas<<" "<<A[i].kaina<<" "<<"x"<<" "<<
            B[indeksas][i]<<" "<<"="<<" "<<B[indeksas][i]*A[i].kaina<<endl;
        }
    }
    fw<<endl;
    fw << "Is viso......................." << didz;
    fw.close();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////             RADIJO VARZYBOS
Duomenys:


4 
LY125 Antanas
4 
1 LY247 Jonas 2 
2 YL155 Janis 2 
3 LY321 Jurgis 1 
4 DL322 Hans 1 
LY321 Jurgis 
3 
1 LY125 Antanas 3 
2 OH105 Juha 1 
3 LZ352 Anton 1 
LY247 Jonas
2 
1 YL157 Janis 1 
2 LY125 Antanas 1 
YL157
1 LY247 1 
2 LY125 Antanas 2 
3 OH105 Juha 2






#include<fstream>
#include <iostream>
const char FR[]="Radio_duom.txt";
const char FW[]="Radio_rez.txt";
const int Max=14;
using namespace std;
struct Duomenys{
  string vardas;
  int indeksas;
  string domenas;
  int taskai;
  int indeksas2;
};
void Skaityti(const char FR[], int &n, Duomenys A[], int &k);
void Skaiciuoti(Duomenys A[], int n, int k);
void Irasyti (const char FW[], Duomenys A[], int n);
int main()
{
    int n,k;
    Duomenys A[100];
   Skaityti(FR,n,A,k);
   Skaiciuoti(A,n,k);
   Irasyti(FW,A,n);
    return 0;
}
void Skaityti(const char FR[], int &n, Duomenys A[], int &k)
{
    ifstream fr(FR);
    char name[Max+1];
    fr>>n;
    fr.ignore(80,'\n');
    for(int i=0;i<n;i++)
    {
        fr.get(name,Max,'\n');
        A[i].vardas=name;
        A[i].indeksas2=i;
        fr.ignore(80,'\n');
        fr>>A[i].indeksas;
        fr.ignore(80,'\n');
         //k+=A[i].indeksas;
        for(int j=0;j<A[i].indeksas;j++)
        {
            fr.ignore(2);
            fr>> A[k].domenas;
             k++;
            //cout<<A[k].domenas<<endl;
            fr.ignore(80,'\n');
        }
        
    }
    //cout<<k<<endl;
    for(int i=0;i<k;i++)
    {
        //cout<<A[i].domenas<<endl;
    }
}
void Skaiciuoti(Duomenys A[], int n, int k)
{
    int m=0;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<A[i].indeksas;j++)
        {
            if(A[m].domenas[0]==A[i].vardas[0] && A[m].domenas[1]==A[i].vardas[1])
            {
                  A[i].taskai++;  
            }
            else
            {
                A[i].taskai+=5;
            }
            m++;
        }
    }
    
    for(int i=0;i<n;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            if(A[i].taskai<A[j].taskai)
            {
                swap(A[i],A[j]);
            }
        }
    }
}

void Irasyti (const char FW[], Duomenys A[], int n)
{
    ofstream fw(FW);
    for(int i=0;i<n;i++)
    {
        fw<<A[i].indeksas2+1<<" "<<A[i].vardas<<" "<<A[i].taskai<<endl;
    }
}



////////////////////////////////////////////////////////////////////////////
////////////////////    Sienpjoviai

4 3 
Jurgis          2 15
Antanas         2 35
Aloyzas         2 75
Martynas        3 05
15 12 17 22
0 10 15 11
7 15 0 0
///////////////////////////////
#include<fstream>
#include <iostream>
const char FR[]="brigada_duom.txt";
const char FW[]="brigada_rez.txt";
const int Max=16;
typedef int masyvas[100][100];
using namespace std;
struct Duomenys
{
    string vardas;
    int kaina, kaina2,eurai,centai;
    
};
void Skaityti(const char FR[], int &n, int &m, Duomenys A[], masyvas B);
void Skaiciuoti_Eurus(Duomenys A[],masyvas B, int n, int m);
void Skaiciuoti_Centus(Duomenys A[],masyvas B, int n, int m);
void Irasyti(const char FW[], Duomenys A[], int n);
int main()
{   Duomenys A[100];
    masyvas B;
    int m,n;
    Skaityti(FR,n,m,A, B);
    Skaiciuoti_Eurus(A,B,n,m);
    Skaiciuoti_Centus(A,B,n,m);
    Irasyti(FW,A,n);
    return 0;
}
void Skaityti(const char FR[], int &n, int &m, Duomenys A[], masyvas B)
{
   ifstream fr(FR);
   char name[Max+1];
   fr>>n>>m;
   fr.ignore(80,'\n');
   for(int i=0;i<n;i++)
   {
       fr.get(name, Max);
       A[i].vardas=name;
       fr>>A[i].kaina>>A[i].kaina2;
       fr.ignore(80,'\n');
       //cout<<A[i].vardas<<" "<<A[i].kaina<<" "<<A[i].kaina2<<endl;
   }
   for(int i=0;i<m;i++)
   {
       for(int j=0;j<n;j++)
       {
       fr>>B[i][j];
       //cout<<B[i][j]<<" ";
       }
       //cout<<endl;
   }
   fr.close();
}
void Skaiciuoti_Eurus(Duomenys A[],masyvas B, int n, int m)
{
    int suma=0;
    int k=0;
    for(int j=0;j<n;j++)
    {
        for(int i=0;i<n;i++)
        {
            if(i==3)
            {
                k++;
                suma=0;
            }
            suma+=B[i][0+k]*A[k].kaina;
               A[0+k].eurai=suma;
        }
         //cout<<A[j].eurai<<endl;
    }
}

void Skaiciuoti_Centus(Duomenys A[],masyvas B, int n, int m)
{
    int transitas=0;
    int g=0;
    int l=0;
    for(int j=0;j<n;j++)
    {
        g=A[j].eurai/A[j].kaina;
        A[j].centai=A[j].kaina2*g;
        transitas=A[j].centai;
        A[j].centai=A[j].centai%100;
        transitas-=A[j].centai;
        A[j].eurai+=(transitas/100);
        //cout<<A[j].eurai<<endl;
    }
    
}
void Irasyti(const char FW[], Duomenys A[], int n)
{
    int viso=0;
    int viso2=0;
    int transitas=0;
    ofstream fw(FW);
    for(int i=0;i<n;i++)
    {
        viso+=A[i].eurai;
        viso2+=A[i].centai;
        if(viso2>100)
        {
            transitas=viso2;
            viso2=viso2%100;
            viso+=(transitas/100);
        }
        fw<<A[i].vardas<<" "<<A[i].eurai<<" "<<"Eur"<<" "<<A[i].centai<<" "<<"ct"<<endl;\
    }
    fw<<"Is viso..............."<<viso<<" "<<"EUR"<<" "<<viso2<<" "<<"ct"<<endl;
}


#include<fstream>
#include <iostream>
const char FR[]="Radio_duom.txt";
const char FW[]="Radio_rez.txt";
const int Max=13;
const int Max2=2;
using namespace std;
struct Duomenys{
  string vardas,domenas;
};
void Skaityti(const char FR[], int &n, Duomenys A[]);

int main()
{
    int n;
    Duomenys A[100];
   Skaityti(FR,n,A);
    return 0;
}
void Skaityti(const char FR[], int &n, Duomenys A[])
{
    int m=0;
    ifstream fr(FR);
    char name[Max+1], salis[Max2+1];
    fr>>n;
    fr.ignore(80,'\n');
    for(int i=0;i<n;i++)
    {
        fr.get(name,Max,'\n');
        A[i].vardas=name;
        fr.ignore(80,'\n');
        fr>>m;
         cout<<m<<endl;
        fr.ignore(80,'\n');
        for(int j=0;j<m;j++)
        {
            fr.ignore(2);
            fr.get(salis, Max2);
            A[i].domenas=salis;
            fr.ignore(80,'\n');
        }
    }
    for(int i=0;i<n;i++)
    {
        //cout<<A[i].vardas<<" "<<A[i].domenas<<endl;
        //cout<<m<<endl;
    }
}
///////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
////////Zaislai

#include<fstream>
#include <iostream>
#include <algorithm> // until c++11
#include <utility>
const char FR[]="Kaziukas_duom.txt";
const char FW[]="Kaziukas_rez.txt";
const int Max=14;
typedef int masyvas[100][100];
using namespace std;
struct Duomenys
{
    string vardas;
    int taskai;
    
};
void Skaityti(const char FR[], int &n, int &m, Duomenys A[], masyvas B);
void Skaiciuoti_Dovanas(Duomenys A[],masyvas B, int n, int m, int &didziausias);
void Irasyti(const char FW[], Duomenys A[], int m, int didziausias);
int main()
{   Duomenys A[100];
    masyvas B;
    int m,n, didziausias;
    Skaityti(FR,n,m,A, B);
    Skaiciuoti_Dovanas(A,B,n,m, didziausias);
    Irasyti(FW,A,m, didziausias);
    return 0;
}
void Skaityti(const char FR[], int &n, int &m, Duomenys A[], masyvas B)
{
   ifstream fr(FR);
   char name[Max+1];
   fr>>n>>m;
   fr.ignore(80,'\n');
   for(int i=0;i<m;i++)
   {
       fr.get(name, Max);
       A[i].vardas=name;
       fr.ignore(80,'\n');
       //cout<<A[i].vardas<<endl;
   }
   for(int i=0;i<n;i++)
   {
       for(int j=0;j<m+1;j++)
       {
       fr>>B[i][j];
       //cout<<B[i][j]<<" ";
       }
       //cout<<endl;
   }
   fr.close();
}
void Skaiciuoti_Dovanas(Duomenys A[],masyvas B, int n, int m, int &didziausias)
{
    for(int j=0;j<n;j++)
    {
        for(int i=1;i<m+1;i++)
        {
          A[i-1].taskai+=B[j][i];
        }
    }
    for(int j=0;j<n;j++)
    {
      if(didziausias<A[j].taskai)
      {
          didziausias=A[j].taskai;
      }
    }
}


void Irasyti(const char FW[], Duomenys A[], int m, int didziausias)
{
    int viso=0;
    string didziausias2="";
    ofstream fw(FW);
    for(int i=0;i<m;i++)
    {
        viso+=A[i].taskai;
        fw<<A[i].vardas<<" "<<A[i].taskai<<endl;
        if(A[i].taskai==didziausias)
        {
            didziausias2=A[i].vardas;
        }
    }
    fw<<"Is viso........."<<viso<<endl;
    fw<<didziausias2; 
}
//////////////////////////
////////////////////////////
/////////////////////////
Duomenys:

8 5
Gliaudykle
Svilpyne
Dudele
Kiausinis
Vilkelis
2 1 2 3 2 5
5 1 1 0 0 3
2 1 4 3 0 1
3 2 3 1 1 1 
6 2 3 2 1 0
3 2 1 0 0 1
3 1 1 1 0 1
5 2 5 1 1 0

////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
/////////////////////////////////////////////
////////////////     VAISTAZOLIU FABRIKAS

#include <iostream>
#include <fstream>
const char FR[]="duom.txt";
const char FW[]="Ats.txt";

using namespace std;
struct Duomenys{
int dezute, likutis;
};
void Skaityti(const char FR[], int &n, Duomenys A[], int &k);
void Skaiciuoti(Duomenys A[], int n, int k, int &Max, int &g);
void Irasyti(Duomenys A[], int n, int k, int Max, int g);

int main()
{
    Duomenys A[100];
    int n, k, Max, g;
    Skaityti(FR, n, A,k);
    Skaiciuoti(A,n,k, Max, g);
    Irasyti(A,n,k,Max, g);
    return 0;
}

void Skaityti(const char FR[], int &n, Duomenys A[], int &k)
{
    ifstream fr(FR);
    fr>>n>>k;
    for(int i=0;i<n;i++)
    {
     fr>>A[i].dezute;
    }
}

void Skaiciuoti(Duomenys A[], int n, int k, int &Max, int &g)
{
    double j=0;
     for(int i=0;i<n;i++)
     {
         g=A[i].dezute;
         A[i].dezute=A[i].dezute/k;
         A[i].likutis=g-(A[i].dezute*k);
     }
     for(int i=0;i<n;i++)
     {
         j+=A[i].likutis;
     }
      j=j/k;
      g=j;
      if(j>g)
      {
          g++;
      }
     for(int i=0;i<n;i++)
     {
         if(A[i].dezute>Max)
         {
             Max=A[i].dezute;
         }
     }
}

void Irasyti(Duomenys A[], int n, int k, int Max, int g)
{
    ofstream fw("Ats.txt");
      for(int i=0;i<n;i++)
     {
         fw<<A[i].dezute<<"   "<<A[i].likutis<<endl;
     }
   fw<<endl;
   fw<<g<<endl;
   fw<<Max;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////
Duomenys:

10 8
78
56
45
81
64
75
82
66
72
71
///////////////////////////////////////////////////////
///////////////////////////
////////////////             Informatikos Olimpiada
#include <iostream>
#include <fstream>

using namespace std;
const int MAX =17;
struct Duomenys{
     string vardas;
     int rezultatas;
     int rezultatai[100];
};
void Skaityti (Duomenys A[],int &n,int &k, int &r);
void Skaiciuoti (Duomenys A[], int n, int k);
void Rusiuoti (Duomenys A[], int n);
void Irasyti (Duomenys A[], int n, int r);

int main()
{
    Duomenys A[100];
    int n,k,r;
    Skaityti(A,n,k,r);
    Skaiciuoti(A,n,k);
    Rusiuoti(A,n);
    Irasyti(A,n,r);
    return 0;
}
void Skaityti (Duomenys A[],int &n,int &k, int &r)
{
   ifstream fr("duom.txt");
   fr>>n>>k>>r;
   char name[MAX+1];
   fr.ignore();
   for(int i=0;i<n;i++)
   {
       fr.get(name,MAX);
       A[i].vardas=name;
       for(int j=0; j<k;j++)
       {
           fr>>A[i].rezultatai[j];
       }
       fr.ignore();
   }
}
void Skaiciuoti (Duomenys A[], int n, int k)
{
    for(int i=0;i<n;i++)
   {
       for(int j=0; j<k;j++)
       {
           A[i].rezultatas+=A[i].rezultatai[j];
       }
   }

}

void Rusiuoti (Duomenys A[], int n)
{
    for(int i=0; i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            if(A[i].rezultatas>A[j].rezultatas)
            {
                swap(A[i], A[j]);
            }
        }
    }
}

void Irasyti (Duomenys A[], int n, int r)
{
    int g=0;
    ofstream fw("rez.txt");
   for(int i=0;i<n;i++)
   {
       if(A[i].rezultatas>=r)
       {
        fw<<A[i].vardas<<" "<<A[i].rezultatas<<" ";
           fw<<endl;
           if(i==2)
           {
               fw<<"-----------------------------------------------------"<<endl;
           }
           g++;
       }
   }
   fw<<"-----------------------------------------------------"<<endl;
   fw<<"-----------------------------------------------------"<<endl;
   for(int i=0; i<n;i++)
   {
       if(A[i].rezultatas<r)
       {
         fw<<A[i].vardas<<" "<<A[i].rezultatas<<" ";
           fw<<endl;
       }
   }
    fw<<g;
}


////////////////////////////////////////////
///////////////////////////////////////
//////////////////////////
Duomenys:

10 4 150
Letapedis Lokys  20 50 30  0
Piskis Kiskis    10 30 60 20
Snape Lape       90 80 70 60
Pilkas Vilkas    20 40 10 10
Patarska Sarka   20 10 15  0
Tylioji Peleda   90 80 70 69
Juoda Varna      40 30 20 20
Kezys Ezys       60  0 60 30
Dryzius Barsukas 95 67 49 81
Ukas Apuokas     95 67 75 93

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
/////////////////////////////////////////////
////////////////////////////////////////
//////////////////////////
//////////////////////////////////////
#include<fstream>
#include <iostream>
#include <algorithm> // until c++11
#include <utility>
const char FR[]="Kaziukas_duom.txt";
const char FW[]="Kaziukas_rez.txt";
const int Max=14;
typedef int masyvas[100][100];
using namespace std;
struct Duomenys
{
    string vardas;
    int taskai={0};
    int diena={0};
};
void Skaityti(const char FR[], int &n, int &m, Duomenys A[], masyvas B);
void Skaiciuoti_Dovanas(Duomenys A[],masyvas B, int n, int m, int &didziausias);
void Irasyti(const char FW[], Duomenys A[], int m, int didziausias);
int main()
{   Duomenys A[100];
    masyvas B;
    int m,n, didziausias;
    Skaityti(FR,n,m,A, B);
    Skaiciuoti_Dovanas(A,B,n,m, didziausias);
    Irasyti(FW,A,m, didziausias);
    return 0;
}
void Skaityti(const char FR[], int &n, int &m, Duomenys A[], masyvas B)
{
   ifstream fr(FR);
   char name[Max+1];
   fr>>n>>m;
   fr.ignore(80,'\n');
   for(int i=0;i<m;i++)
   {
       fr.get(name, Max);
       A[i].vardas=name;
       fr.ignore(80,'\n');
       //cout<<A[i].vardas<<endl;
   }
   for(int i=0;i<n;i++)
   {
       for(int j=0;j<m+1;j++)
       {
       fr>>B[i][j];
      // cout<<B[i][j]<<" ";
       }
       //cout<<endl;
   }
   fr.close();
}
void Skaiciuoti_Dovanas(Duomenys A[],masyvas B, int n, int m, int &didziausias)
{
    int g[100]={0};
    for(int j=0;j<n;j++)
    {
        for(int i=1;i<m+1;i++)
        {
          A[i-1].taskai+=B[j][i];
          }
    }
    for(int i=0;i<n;i++)
    {
        g[i]=B[i][0];
        if(B[i][0])
          cout<<B[i][0]<<" ";

        cout<<endl;
    }

    for(int j=0;j<n;j++)
    {
      if(didziausias<A[j].taskai)
      {
          didziausias=A[j].taskai;
      }
    }
}


void Irasyti(const char FW[], Duomenys A[], int m, int didziausias)
{
    int viso=0;
    string didziausias2="";
    ofstream fw(FW);
    for(int i=0;i<m;i++)
    {
        viso+=A[i].taskai;
        fw<<A[i].vardas<<" "<<A[i].taskai<<endl;
        if(A[i].taskai==didziausias)
        {
            didziausias2=A[i].vardas;
        }
    }
    fw<<"Is viso........."<<viso<<endl;
    fw<<didziausias2;
}


//////////////////////////////////////////////////////////////////
///////////////////////// Marsrutinis Autobusas

#include <iostream>
#include <fstream>

using namespace std;
const char FR[]="auto_duom.txt";
const char FW[]="auto_rez.txt";
struct Duomenys{
   string stotele;
   int ilipo;
   int islipo;
};
void Skaityti(int &n, int &m, Duomenys A[]);

int main()
{
    int n, m;
    Duomenys A[100];
    Skaityti(n,m,A);
    return 0;
}
void Skaityti(int &n, int &m,Duomenys A[])
{
    ifstream fr("auto_duom.txt");
    fr>>m>>n;
    for(int i=0;i<n;i++)
    {
        fr>>A[i].stotele;
        //cout<<A[i].stotele<<endl;
    }
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j+=2)
        {
            fr>>A[j].ilipo>>A[j+1].islipo;
            cout<<A[j].ilipo<<" "<<A[j+1].islipo<<endl;
        }
    }

}
///////////////
5 7
Stotis
Vilties
Centras
Sportininku
Ausros
Savivaldbes
Mokykla
10 0 5 1 6 4 8 11 9 3 8 15
3 10
12 5 18 3 10 14 20 11 24 7
10 2 2 30
10 24 14 6 20 10 20 25 15 18
15 5 30 3
15 4 8 20 12 25 5 11 8 5 20
3 18 15
8 1 5 2 5 10 12 5 9 8 1 10
3 1

------------------------------------------------------------------------------
/////////////////////////////////////////////////////
//////////////////////////////    KTU PELENE//////////////////////////////// 61 PSL.
#include <fstream>
#include <iostream>

using namespace std;
const char FR[]="Duomenys1.txt";
const char FW[]="Rezultatai1.txt";

struct Duomenys{
  char kokybe;
  int dydis;
};

void Skaitymas(const char FR[], Duomenys A[], int &n);
void Naikiname(Duomenys A[], int &n);
void Rikiuojame(Duomenys A[], int n);
void Skirtingi (Duomenys A[], int n, int &dezes);
void Irasyti (int n, Duomenys A[], int dezes);

int main()
{
    int n;
    int dezes = 0;
    Duomenys A [500];
    Skaitymas(FR,A,n);
    Naikiname(A,n);
    Rikiuojame(A,n);
    Skirtingi(A,n, dezes);
    Irasyti(n,A,dezes);
    return 0;
}
void Skaitymas(const char FR[], Duomenys A[], int &n) //skaitymas
{
    ifstream fr(FR);
    fr>>n;
    for(int i = 0; i < n; i++)
    {
        fr>>A[i].kokybe>>A[i].dydis;
    }
}

void Naikiname(Duomenys A[], int &n) //naikiname blogus zirnius
{
    for(int i = 0; i < n; i++)
    {
        if(A[i].kokybe == 'b')
        {
            for(int j = i; j < n; j++)
            {
                A[j]=A[j+1];
            }
            i--;
            n--;
        }
    }
}

void Rikiuojame(Duomenys A[], int n) //rikiuojame zirnius pagal dydi
{
    for (int i = 0; i < n; i++)
    {
        for (int j = i + 1; j < n; j++)
        {
            if(A[i].dydis > A[j].dydis)
            {
                swap(A[i],A[j]);
            }
        }
    }
}

void Skirtingi (Duomenys A[], int n, int &dezes)  //randame kiek deziu reiks skirtingiems zirniams
{
    for(int i = 0; i < n; i++)
    {
        if(A[i].dydis != A[i+1].dydis)
        {
            dezes++;
        }
    }
}

void Irasyti (int n, Duomenys A[], int dezes)
{
    ofstream fw(FW);
    for (int i = 0; i < n; i++)
    {
        fw<<A[i].dydis<<" ";
    }
    fw<<endl;
    fw<<endl;
    fw<<dezes;
    fw.close();
}


/////////////////////////////////////////
/////////////////KTU NACIONALINE RINKTINE

#include <iostream>
#include <fstream>
#include <cmath>
#include <string>

using namespace std;

const char FR[]="duom.txt";
const char FW[]="ans.txt";

struct Duomenys{
    string vardas;
    string pavarde;
    double naudingumas;
};

void Skaityti (Duomenys A[], Duomenys B[], int &n, double &p, int &k); //n - kiekis; p - pir reitingas; k - kandidat7 kiekis
void Naudingumas (Duomenys A[], int &n, double p, string &aprasas);
void Rikiavimas (Duomenys A[], int n, string &aprasas);
void Iterpimas (Duomenys A[], Duomenys B[], int &n, int k, string &aprasas);
void Nepateke (Duomenys B[], int k, string aprasas);
void Irasyti(Duomenys A[], int n,string aprasas);
int main()
{
  int n, k;
  double p;
  string aprasas;
  Duomenys A[100];
  Duomenys B[100];
  Skaityti (A, B, n, p, k);
  Naudingumas(A, n, p, aprasas);
  Irasyti (A, n, aprasas);
  Rikiavimas (A, n, aprasas);
  Irasyti (A, n, aprasas);
  Iterpimas (A, B, n, k, aprasas);
  Irasyti (A, n, aprasas);
  Nepateke (B, k, aprasas);
    return 0;
}

void Skaityti(Duomenys A[], Duomenys B[], int &n, double &p, int &k)
{
    int i=0;
    ifstream fr(FR);
    fr >>  p >> n; // read the data into variables
    for (int i = 0; i < n; i++)
    {
        fr>>A[i].vardas>>A[i].pavarde>>A[i].naudingumas;
    }
         fr>>k;
    while (fr>>B[i].vardas>>B[i].pavarde>>B[i].naudingumas)
    {
        //cout<<B[i].vardas<<" "<<B[i].pavarde<<" "<<B[i].naudingumas<<endl;
        i++;
    }
}

void Naudingumas (Duomenys A[], int &n, double p, string &aprasas)
{
    aprasas="Be pasalintu zaideju:";
    for (int i = 0; i < n; i++)
    {
        if(A[i].naudingumas < p)
        {
            for (int j = i; j < n; j++)
            {
                A[j]=A[j + 1];
            }
            i--;
            n--;
        }
    }
}

void Rikiavimas (Duomenys A[], int n, string &aprasas)
{
    aprasas="Surikiuota:";
    for (int i = 0; i < n; i++)
    {
        for (int j = i + 1; j < n; j++)
        {
            if(A[i].naudingumas < A[j].naudingumas)
            {
                swap(A[i], A[j]);
            }
            if(A[i].naudingumas == A[j].naudingumas)
            {
                if(A[i].vardas[0] < A[j].vardas[0])
                {
                    swap(A[i], A[j]);
                }
            }
        }
    }
}

void Iterpimas (Duomenys A[], Duomenys B[], int &n, int k, string &aprasas)
{
    aprasas="Su papildomais zaidejais:";
    for (int i = 0; i < k + 1; i++)
    {
        for (int j = i + 1; j < k + 1; j++)
        {
            if (B[i].naudingumas < B[j].naudingumas)
            {
                swap(B[i], B[j]);
            }
            if (B[i].naudingumas == B[j].naudingumas)
            {
                if(B[i].vardas[0] < B[j].vardas[0])
                {
                    swap(B[i], B[j]);
                }
            }
        }
    }

   for (int i = 0; i < k; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (B[i].naudingumas > A[j].naudingumas)
            {
                for (int l = n; l > j; l--)
                {
                    A[l] = A[l-1];
                }
                A[j] = B[i];
                n++;
                break;
            }
            if(B[i].naudingumas == A[j].naudingumas && A[j].vardas[0] == B[i].vardas[0])
            {
                for (int l = n; l > j; l--)
                {
                    A[l] = A[l-1];
                }
                A[j] = B[i];
                n++;
                break;
            }
        }
    }
}

void Nepateke (Duomenys B[], int k, string aprasas)
{
    ofstream fw(FW, ios::app);
    aprasas="Nepateke:";
    fw<<aprasas<<endl;
    fw<<"------------------------------------"<<endl;
    fw<<"  |Vardas"<<"   |Pavarde"<<" |Naudingumas |"<<endl;
    fw<<"------------------------------------"<<endl;
        fw<<"|"<<B[k].vardas<<" |"<<B[k].pavarde<<"      |"<<B[k].naudingumas<<endl;
    fw<<"---------------------------------------"<<endl;
    fw<<endl;
}

void Irasyti(Duomenys A[], int n, string aprasas)
{
    ofstream fw(FW, ios::app);
    fw<<aprasas<<endl;
    fw<<"------------------------------------"<<endl;
    fw<<"  |Vardas"<<"   |Pavarde"<<" |Naudingumas |"<<endl;
    fw<<"------------------------------------"<<endl;
    for (int i = 0; i < n; i++)
    {
        fw<<"|"<<A[i].vardas<<" |"<<A[i].pavarde<<"      |"<<A[i].naudingumas<<endl;
    }
    fw<<"---------------------------------------"<<endl;
    fw<<endl;
}

///////////////////////////////////

5.0
15
Mantas Kalnietis 5.4
Adas Juskevicius 10.1
Martynas Pocius 2.4
Renaldas Seibutis 0.0
Martynas Gecevicius 9.6
Tomas Delininkaitis 5.4
Jonas Maciulis 11.4
Mindaugas Kuzminskas 11.4
Donatas Motiejunas 11.4
Linas Kleiza 2.2
Paulius Jankunas 8.9
Ksystofas Lavrinovicius 6.9
Darjusas Lavrinoviciusz 6.9
Jonas Valanciunas 10.0
Robertas Javtokas 5.4
3
Arturas Milaknis 6.9
Domantas Sabonis 6.9
Gediminas Orelikas 7.1
Jonas Jonaitis 7.7


////////////////////////////////////
////////////////////////////////
////////////////////

#include <iostream>
#include <string>

using namespace std;

string addBinary(string a, string b) {
    int n = a.length();
    int m = b.length();
    if (n < m) {
        swap(a, b);
        swap(n, m);
    }
    string result = "";
    int carry = 0;
    int j = m - 1;
    for (int i = n - 1; i >= 0; i--) {
        if (j >= 0) {
            carry += a[i] - '0' + b[j] - '0';
            j--;
        } else {
            carry += a[i] - '0';
        }
        result = char(carry % 2 + '0') + result;
        carry /= 2;
    }
    if (carry) {
        result = '1' + result;
    }
    return result;
}

int main() {
    string a, b;
    cin >> a >> b;
    cout << addBinary(a, b) << endl;
    return 0;
}

















